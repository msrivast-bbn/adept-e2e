#! /bin/env python

# Deserializes htlcc containers in part files and writes them to an
# output directory in prettyprinted format.

# WARNING: input directory is hardcoded below. Change accordingly.
# NOTE: output directory is created next to input directory in the file structure.

# WARNING: Code assumes that the input directory is a directory full of 
# subdirectories which contain the part files. Comment out the first 
# loop if you are just using a single directory full of part files.

# This was developed as part of the entity typing check effort. The full
# envisioned code path is as follows:
#
# 1 Documents run through e2e, resulting in part-* files in htlcc format
# 2 entity_type_data_generator.py (this file) deserializes part files and
#   produces prettyprinted versions of the file with the same filenames in
#   the specified output directory
# 3 entity_type_pprint_tab_delimited.py runs over the files generated by this version,
#   producing one output file per algorithm type (where algorithm types are
#   broken down by directory) in a tab-delimited format suitable for opening
#   in Excel
# 4 entity_type_find_mismatch.py processes the output of pprint_tab_delimited.py
#   and produces statistics over the data 

# Other fixes to make for the next version: invoke pprint directly instead of calling maven

# In order to run this

import os, sys
from os import listdir
from os.path import isfile, join

# This script must be run from the main adept-e2e directory to avoid
# silent failure with a "pom not found" error. Change this directory
# according to your local file structure
os.chdir("/nfs/mercury-04/u60/DEFT/users/ldavis/adept-e2e")

# change to point to your input directory (where the part files are located)
input_path = "/nfs/mercury-04/u60/DEFT/users/ldavis/entity_typing/input"

directories = os.listdir(input_path)
print "Found", len(directories), "directories."
j = 0;

for directory in directories:
    j += 1;
    print "Processing", directory, "(directory", j, "of", len(directories), ")"
    directory_path = input_path + "/" + directory
    files = os.listdir(directory_path) # this is more fragile than the below - may pick up directories - but considerably faster
    #files = [f for f in listdir(directory_path) if isfile(join(directory_path, f))]
    print "Found", len(files), "files in", directory_path
    i = 0;
    for file in files:
	i += 1
	if i > 3:		# exits after two files for quicker debugging
	    sys.exit();

	# check that file is a part file - should begin with "part -"
	if "part-" not in file:
	    print "\tSkipping ", file, "(", i, "of", len(files), " in directory", j, "of", len(directories), ")"
	    continue
	print "\tProcessing", file, "(", i, "of", len(files), " in directory", j, "of", len(directories), ")"
	input_file = directory_path + "/" + file
	output_file = directory_path.replace("input", "output") + "/" + file
	print "\tInput:", input_file
	print "\tOutput:", output_file
	command = "./src/main/python/pprint_hltcc_part_only.py -o " + output_file + " -s adept.common.HltContentContainer " + input_file
	#print command
	os.system(command)

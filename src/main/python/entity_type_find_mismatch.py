#! /bin/env python

# author: leah davis / raytheon

# Compares an output file (generated by pprint_tab_delimited.py) to a gold master strings file
# generated by e2e and provides results in three categories:
#
# MATCH
# MISMATCH
# NO MATCH
#
# Each category of results is output in an eponymous text file in the current directory.
#
# WARNING: input paths (2) are hardcoded. Alter them according to your file structure.
# NOTE: output paths (3) are hardcoded to appear in the current directory with
#       eponymous names. Alter as desired.

# This was developed as part of the entity typing check effort. The full
# envisioned code path is as follows:
#
# 1 Documents run through e2e, resulting in part-* files in htlcc format
# 2 entity_type_data_generator.py deserializes part files and
#   produces prettyprinted versions of the file with the same filenames in
#   the specified output directory
# 3 entity_type_pprint_tab_delimited.py runs over the files generated by this version,
#   producing one output file per algorithm type (where algorithm types are
#   broken down by directory) in a tab-delimited format suitable for opening
#   in Excel
# 4 entity_type_find_mismatch.py (this file) processes the output of pprint_tab_delimited.py
#   and produces statistics over the data 


import sys, os

# Change the following two lines to the appropriate input paths
serif_input_path = "/DEFT/entity_typing/outputBBN_SERIF.txt"
master_input_path = "/DEFT/entity_typing/gold.combined.tsv.strings"

# As desired, change the following three lines to the appropriate output paths
match_output_file = open("/DEFT/entity_typing/match.txt", 'w')
mismatch_output_file = open("/DEFT/entity_typing/mismatch.txt", 'w')
no_match_output_file = open("/DEFT/entity_typing/no_match.txt", 'w')

master_entities = {}

open_file = open(master_input_path, 'r')
for line in open_file:
    entries = line.split("\t")
    master_string = entries[6].strip(' \t\n\r')
    master_type = entries[5].split('/',1)[0].strip(' \t\n\r')
    #print "String: ", master_string
    #print "Type: ", master_type
    
    if master_string not in master_entities:
        master_entities[master_string] = master_type

open_file.close()

#print len(master_entities)
#sys.exit()

open_file = open (serif_input_path, 'r')
for line in open_file:
    if "ALL_ENTITIES" in line:
        continue
    else:
        entries = line.split("\t")
        match_string = entries[1].strip(' \t\n\r')
        del entries[0]  # remove total number count
        del entries[0]  # remove match string
        # what remains in entries are all types
        for current_type in entries:
            match_type = current_type.split(':',1)[0].strip(' \t\n\r')
            if match_string in master_entities:
                if master_entities[match_string] == match_type:
                    match_output_file.write("Match: %s has correct type %s\n" % (match_string,match_type))
                else:
                    mismatch_output_file.write("Mismatch: %s has BBN_SERIF type %s but master type %s\n" % (match_string,match_type,master_entities[match_string]))        
            else:
                no_match_output_file.write("No match: %s not present in master set.\n" % match_string)
